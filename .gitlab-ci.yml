stages:
  - generate-release
  - sast
  - build
  - coverage
  - integration
  - publish
  - release

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

################################################################################################
# Build
################################################################################################

# All versions <=1.16
.jdk8:
  image: maven:3.8-openjdk-8

# 1.17
.jdk16:
  image: maven:3.8-openjdk-16

# 1.18+
.jdk17:
  image: maven:3.8-openjdk-17

#use maven verify we don't need to pollute the cache with the build artifacts
.build:
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
  artifacts:
    paths:
      - plugin/target/*.jar                             #Grab the built jars
      - plugin/target/site/jacoco/jacoco.xml
    reports:
      junit:
        - plugin/target/surefire-reports/TEST-*.xml
        - plugin/target/failsafe-reports/TEST-*.xml
        
build:jdk8:
  extends: [.jdk8, .build]

build:jdk16:
  extends: [.jdk16, .build]

build:jdk17:
  extends: [.jdk17, .build]

coverage:
  stage: coverage
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    # convert report from jacoco to cobertura, using relative project path
    - python /opt/cover2cover.py plugin/target/site/jacoco/jacoco.xml $CI_PROJECT_DIR/plugin/src/main/java/ > plugin/target/site/cobertura.xml
  needs: ["build:jdk17"]
  artifacts:
    reports:
      cobertura: plugin/target/site/cobertura.xml

################################################################################################
# Publish
################################################################################################

.publish:
  stage: publish
  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file plugin/target/ArtMap-${CURRENT_VERSION}.jar "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/ArtMap/${NEXT_VERSION}/ArtMap-${JDK}-${NEXT_VERSION}.jar"'
  only:
    - master

publishjdk8:
  extends: .publish
  needs: ["release:generate-release","build:jdk8"]
  variables:
    JDK: "JDK8"

publish:jdk16:
  extends: .publish
  needs: ["release:generate-release","build:jdk16"]
  variables:
    JDK: "JDK16"

publish:jdk17:
  extends: .publish
  needs: ["release:generate-release","build:jdk17"]
  variables:
    JDK: "JDK17"

################################################################################################
# Integration - Just some debugging for now - Intention is to use docker and test startup on various MC versions
################################################################################################

integration:
  stage: integration
  needs: ["build:jdk17"]
  script:
    - echo $NEXT_VERSION
    - echo $CURRENT_VERSION

################################################################################################
# Versioning Release
################################################################################################

#Updates POM versions to keep them in line with the release
#Only pushes if there are changes
release:maven-release:
  extends: .jdk17
  stage: release
  needs: ["release:generate-release","publish:jdk17","release:tag"]
  variables:
    COMMIT_MESSAGE: "chore(release): [skip ci] Release ${NEXT_VERSION}"
  before_script:
    - git remote set-url origin https://GITLAB_TOKEN:${GITLAB_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git
    - git config --global user.email '${GITLAB_USER_EMAIL}'
    - git config --global user.name '${GITLAB_USER_ID}'
  script:
    - git checkout master
    - mvn versions::set -DnewVersion=${NEXT_VERSION}
    - mvn versions::commit
    - git add .
    - |-
      CHANGES=$(git status --porcelain | wc -l)
      if [ "$CHANGES" -gt "0" ]; then
        git status
        git commit -m "${COMMIT_MESSAGE}"
        git push
      fi
  only:
    - master

#Generates the version number and adds it to build.env so its available for later steps
#Git pull is needed because maven-release pushes and causes this to break
release:generate-release:
  image: node:16-buster-slim
  stage: generate-release
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git-core ca-certificates
    - npm install -g semantic-release @semantic-release/gitlab
    - npm install @semantic-release/git @semantic-release/changelog @semantic-release/exec -D
  script:
    - semantic-release --dry-run
    - cat build.env
  artifacts:
    reports:
      dotenv: build.env
  only:
    - master

release:tag:
  stage: release
  extends: release:generate-release
  needs: ["publish:jdk17"]
  script:
    - semantic-release